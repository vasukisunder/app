{"version":3,"sources":["store/reducers/reducers.js","store/reducers/index.js","components/Trivia.js","store/actions/actions.js","App.js","index.js"],"names":["triviaState","trivia","isFetching","error","yearState","mathState","combineReducers","state","action","type","payload","yearTrivia","mathTrivia","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","margin","spacing","width","title","fontSize","fontStyle","connect","console","log","year","yearFetching","yearError","math","mathFetching","mathError","fetchTrivia","dispatch","axios","get","then","response","data","catch","fetchYear","fetchMath","inputNumber","input","toUpperCase","props","classes","useState","setInput","useEffect","class","className","noValidate","autoComplete","TextField","id","label","variant","name","value","onChange","e","target","ButtonGroup","color","aria-label","isNaN","Button","onClick","preventDefault","disabled","Card","body","CardContent","t","CircularProgress","Typography","gutterBottom","component","CardActions","App","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d9543bd.chunk.js","sourcesContent":["const triviaState = {\n    trivia: \"261 is number of possible unfolded tesseract patterns.\",\n    isFetching: false,\n    error: ''\n};\n\nconst yearState = {\n    trivia: \"2013 is the year that China will attempt its first unmanned Moon landing\",\n    \n    isFetching: false,\n    error: ''\n};\n\nconst mathState = {\n    trivia: \"5 is the number of platonic solids.\",\n    isFetching: false,\n    error: ''\n};\n\nexport const reducer = (state = triviaState, action) => {\n    switch(action.type) {\n        case 'TRIVIA_START':\n            return {\n                ...state,\n                isFetching: true\n            };\n        case 'TRIVIA_SUCCESS': \n            return {\n                isFetching: false,\n                trivia: action.payload,\n                error: ''\n            };\n        case 'TRIVIA_FAILURE':\n            return {\n                ...state,\n                isFetching: false,\n                error: action.payload\n            }\n    \n        default:\n            return state;\n    }\n}\n\nexport const yearReducer = (state = yearState, action) => {\n    switch(action.type) {\n        case 'YEAR_START':\n            return {\n                ...state,\n                isFetching: true\n            };\n        case 'YEAR_SUCCESS': \n            return {\n                isFetching: false,\n                trivia: action.payload,\n                error: ''\n            };\n        case 'YEAR_FAILURE':\n            return {\n                ...state,\n                isFetching: false,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const mathReducer = (state = mathState, action) => {\n    switch(action.type) {\n        case 'MATH_START':\n            return {\n                ...state,\n                isFetching: true\n            };\n        case 'MATH_SUCCESS': \n            return {\n                isFetching: false,\n                trivia: action.payload,\n                error: ''\n            };\n        case 'MATH_FAILURE':\n            return {\n                ...state,\n                isFetching: false,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n\n\n","import { combineReducers } from 'redux';\nimport { reducer as trivia } from './reducers';\nimport { yearReducer as yearTrivia } from './reducers';\nimport { mathReducer as mathTrivia } from './reducers';\n\nexport default combineReducers({\n    trivia, yearTrivia, mathTrivia\n});","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrivia, fetchYear, fetchMath, inputNumber } from '../store/actions/actions';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { CardContent, CardActions } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    \n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    title: {\n        fontSize: 10,\n        fontStyle: 'italic',\n      },\n      \n  },\n}));\n\nconst Trivia = props => {\n    const classes = useStyles();\n\n\n    const [input, setInput] = useState('');\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    const button1  = e => {\n        e.preventDefault();\n        props.inputNumber(input, 'trivia');\n        setInput('');\n\n    }\n    const button2  = e => {\n        e.preventDefault();\n        props.inputNumber(input, 'year')\n        setInput('');\n\n    }\n\n    const button3  = e => {\n        e.preventDefault();\n        props.inputNumber(input, 'math')\n        setInput('');\n\n    }\n\n   \n   \n\n    useEffect(() => {\n        props.fetchTrivia();\n        props.fetchYear();\n        props.fetchMath();\n    }, []);\n\n    return (\n        <div class=\"all\">\n            <h1>Fun Number Facts!</h1>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n  \n  <TextField id=\"outlined-basic\" label=\"Enter your own number\" variant=\"outlined\"\n  type = \"text\"\n  name = \"input\"\n  value = {input}\n  onChange = {handleChange}\n   />\n</form>\n            \n                <ButtonGroup color=\"secondary\" aria-label=\"contained secondary button group\">\n                    {input && !isNaN(input) ? <Button  id=\"button\" color=\"primary\" onClick={button1}>RANDOM</Button> : <Button  disabled id=\"button\" color=\"primary\" >RANDOM</Button>  }\n\n                    {input && !isNaN(input) ? <Button  id=\"button\" color=\"primary\" onClick={button2}>YEAR</Button> : <Button  disabled id=\"button\" color=\"primary\">YEAR</Button>  }\n\n                    {input && !isNaN(input) ? <Button  id=\"button\" color=\"primary\" onClick={button3}>MATH</Button> : <Button  disabled id=\"button\" color=\"primary\" >MATH</Button>  }\n                    \n                    \n                </ButtonGroup>\n\n           <div className=\"cards\">\n                <Card body id=\"cont\" className=\"text-center\">\n                    <CardContent id=\"box\" t>\n                        {props.isFetching && (\n                            <CircularProgress />)}\n    \n                        {props.trivia &&\n                        <div>\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                            Random Number Fact\n                          </Typography>\n                          <Typography variant=\"h5\" component=\"h2\">\n                          {props.trivia}\n        </Typography>\n                              \n                        </div>}\n    \n                    </CardContent>\n                    <CardActions><Button variant=\"contained\" color=\"primary\"  onClick={props.fetchTrivia}>refresh</Button></CardActions>\n                    \n                </Card>\n    \n    \n    \n                <Card body id=\"cont\" className=\"text-center\">\n                    <CardContent id=\"box\" t>\n                        {props.yearFetching && (\n                            <CircularProgress />)}\n                        {props.trivia &&\n                        <div>\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                            Year Number Fact\n                          </Typography>\n                          <Typography variant=\"h5\" component=\"h2\">\n                          {props.year}\n        </Typography>\n                              \n                        </div>}\n    \n                    </CardContent>\n                   <CardActions> <Button variant=\"contained\" color=\"primary\"  onClick={props.fetchYear}>refresh</Button></CardActions>\n                    \n                    \n                </Card>\n    \n                <Card body id=\"cont\" className=\"text-center\">\n                    <div>\n                        <CardContent id=\"box\" t>\n                            {props.mathFetching && (\n                                <CircularProgress />)}\n                            \n                            {props.math &&\n                            <div>\n                                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                Math Number Fact\n                              </Typography>\n                              <Typography variant=\"h5\" component=\"h2\">\n                              {props.math}\n            </Typography>\n                                  \n                            </div>}\n        \n                        </CardContent>\n                        \n                    </div>\n    <CardActions>\n        \n                         <Button variant=\"contained\" color=\"primary\" onClick={props.fetchMath}>refresh</Button>\n        \n    </CardActions>\n                     \n                    \n                    \n                    \n                </Card>\n           </div>\n        </div>\n    );\n};\n\n\n\n\nconst mapStateToProps = state => {\n    console.log(state);\n    return {\n        trivia: state.trivia.trivia,\n        isFetching: state.trivia.isFetching,\n        error: state.trivia.error,\n        year: state.yearTrivia.trivia,\n        yearFetching: state.yearTrivia.isFetching,\n        yearError: state.yearTrivia.error,\n        math: state.mathTrivia.trivia,\n        mathFetching: state.mathTrivia.isFetching,\n        mathError: state.mathTrivia.error,\n\n    }\n}\n\nexport default connect(mapStateToProps, { fetchTrivia, fetchYear, fetchMath, inputNumber })(Trivia);","import axios from 'axios';\n\nexport const fetchTrivia = () => {\n    return dispatch => {\n        dispatch({ type: 'TRIVIA_START' });\n\n        axios\n        .get('http://numbersapi.com/random/trivia/')\n        .then(response => {\n            console.log(response);\n            dispatch({\n                type: 'TRIVIA_SUCCESS',\n                payload: response.data\n            });\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: 'TRIVIA_FAILURE',\n                payload: error\n            });\n        })\n    }\n}\n\nexport const fetchYear = () => {\n    return dispatch => {\n        dispatch({ type: 'YEAR_START' });\n\n        axios\n        .get('http://numbersapi.com/random/year/')\n        .then(response => {\n            console.log(response);\n            dispatch({\n                type: 'YEAR_SUCCESS',\n                payload: response.data\n            });\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: 'YEAR_FAILURE',\n                payload: error\n            });\n        })\n    }\n}\n\nexport const fetchMath = () => {\n    return dispatch => {\n        dispatch({ type: 'MATH_START' });\n\n        axios\n        .get('http://numbersapi.com/random/math/')\n        .then(response => {\n            console.log(response);\n            dispatch({\n                type: 'MATH_SUCCESS',\n                payload: response.data\n            });\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: 'MATH_FAILURE',\n                payload: error\n            });\n        })\n    }\n}\n\nexport const inputNumber = (input, type) => {\n    return dispatch => {\n        dispatch({ type: `${type.toUpperCase()}_START` });\n\n        axios\n        .get(`http://numbersapi.com/${input}/${type}/`)\n        .then(response => {\n            console.log(response);\n            dispatch({\n                type: `${type.toUpperCase()}_SUCCESS`,\n                payload: response.data\n            });\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: `${type.toUpperCase()}_FAILURE`,\n                payload: error\n            });\n        })\n    }\n}\n\n","import React from 'react';\nimport Trivia from \"./components/Trivia\";\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Trivia />\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './store/reducers';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store = {store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}